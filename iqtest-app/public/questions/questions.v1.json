// src/App.js
const currentKind = currentQuestion?.kind;

function normalizeQuestion(raw) {
  // Pass-through for non-matrix items
  if (raw?.kind && raw.kind !== 'matrix') {
    return {
      id: raw.id,
      kind: raw.kind, // 'sequence' | 'verbal' | etc.
      text: raw.text,
      options: Array.isArray(raw.options) ? [...raw.options
      ] : [],
      answer: raw.answer,
      timeLimitSec: raw.timeLimitSec ?? 30,
      weight: raw.weight ?? 1.0,
    };
  }
  // Matrix adapter
  if (raw?.kind === 'matrix') {
    // If options/answer already provided, just de-dupe and return
    if (Array.isArray(raw.options) && typeof raw.answer !== 'undefined') {
      const uniq = Array.from(new Set(raw.options.map(String)));
      const ans = String(raw.answer);
      return {
        id: raw.id,
        kind: 'matrix',
        text: raw.text,
        options: uniq,
        answer: ans,
        timeLimitSec: raw.timeLimitSec ?? 45,
        weight: raw.weight ?? 1.2,
      };
    }
    // Otherwise, construct serialized cells from candidates using existing helpers
    // Expect raw.candidates: [{ cell }, ...] or similar shape
    const serialize = (c) => (typeof c === 'string' ? c : JSON.stringify(c));
    const options = Array.isArray(raw.candidates) ? raw.candidates.map(serialize) : [];
    const uniq = Array.from(new Set(options));
    const correct =
      typeof raw.answerIndex === 'number' && uniq[raw.answerIndex
    ] ? uniq[raw.answerIndex
    ] : (raw.answer ? serialize(raw.answer) : uniq[
      0
    ] ?? '');
    return {
      id: raw.id,
      kind: 'matrix',
      text: raw.text,
      options: uniq,
      answer: correct,
      timeLimitSec: raw.timeLimitSec ?? 45,
      weight: raw.weight ?? 1.2,
    };
  }
  // fallback (treat as verbal)
  return {
    id: raw?.id ?? 'q-' + Math.random().toString(36).slice(2,
    8),
    kind: 'verbal',
    text: raw?.text ?? '',
    options: Array.isArray(raw?.options) ? [...raw.options
    ] : [],
    answer: raw?.answer,
    timeLimitSec: raw?.timeLimitSec ?? 30,
    weight: raw?.weight ?? 1.0,
  };
}

useEffect(() => {
  const optsBase = Array.isArray(currentQuestion?.options) ? [...currentQuestion.options
  ] : [];
  const opts = currentKind === 'matrix' ? Array.from(new Set(optsBase.map(String))) : optsBase;
  setShuffledOptions(shuffleArray(opts));
},
[currentQuestion
]);

function handleAnswer(option) {
  const picked = String(option);
  const correct = String(currentQuestion.answer);
  const isCorrect = picked === correct;
  // rest of handleAnswer logic...
}
// public/questions/arithmetic.v1.json
{
  "version": "v1",
  "title": "Arithmetic Mini",
  "questions": [
    {
      "id": "s1",
      "kind": "sequence",
      "text": "Q1: 2, 4, 6, 8, ?",
      "options": [
        10,
        12,
        14
      ],
      "answer": 10,
      "timeLimitSec": 25,
      "weight": 1.0
    },
    {
      "id": "s2",
      "kind": "sequence",
      "text": "Q2: 3, 6, 12, 24, ?",
      "options": [
        36,
        48,
        30
      ],
      "answer": 48,
      "timeLimitSec": 25,
      "weight": 1.1
    },
    {
      "id": "s3",
      "kind": "sequence",
      "text": "Q3: 1, 1, 2, 3, 5, ?",
      "options": [
        8,
        7,
        9
      ],
      "answer": 8,
      "timeLimitSec": 30,
      "weight": 1.1
    },
    {
      "id": "s4",
      "kind": "sequence",
      "text": "Q4: 4, 9, 16, 25, ?",
      "options": [
        36,
        30,
        28
      ],
      "answer": 36,
      "timeLimitSec": 25,
      "weight": 1.0
    },
    {
      "id": "s5",
      "kind": "sequence",
      "text": "Q5: 5, 9, 17, 33, ?",
      "options": [
        57,
        49,
        65
      ],
      "answer": 65,
      "timeLimitSec": 30,
      "weight": 1.2
    },
    {
      "id": "s6",
      "kind": "sequence",
      "text": "Q6: 10, 7, 8, 5, 6, 3, ?",
      "options": [
        4,
        2,
        5
      ],
      "answer": 4,
      "timeLimitSec": 30,
      "weight": 1.1
    }
  ]
}
// public/questions/questions.v1.json
{
  "version": "v1",
  "title": "Nonverbal Mini",
  "questions": [
    {
      "id": "q3",
      "kind": "matrix",
      "text": "規則に合う図形を選んでください。",
      "options": [
        "{\"shape\":\"tri\",\"rot\":0,\"fill\":\"#6C5CE7\"}",
        "{\"shape\":\"tri\",\"rot\":90,\"fill\":\"#6C5CE7\"}",
        "{\"shape\":\"tri\",\"rot\":180,\"fill\":\"#6C5CE7\"}"
      ],
      "answer": "{\"shape\":\"tri\",\"rot\":90,\"fill\":\"#6C5CE7\"}",
      "timeLimitSec": 30,
      "weight": 1.2
    },
    {
      "id": "q4",
      "kind": "verbal",
      "text": "「犬」と「猫」はどちらも何に分類されますか？",
      "options": [
        "鳥類",
        "哺乳類",
        "爬虫類"
      ],
      "answer": "哺乳類",
      "timeLimitSec": 30,
      "weight": 1.0
    }
  ]
}